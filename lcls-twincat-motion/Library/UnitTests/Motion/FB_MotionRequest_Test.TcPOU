<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_MotionRequest_Test" Id="{d789a144-5a99-4a8a-8f52-5b0c4ac98000}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MotionRequest_Test EXTENDS TcUnit.FB_TestSuite
(*
    Verify that FB_MotionRequest works and is a suitable
    test proxy for FB_MotionStage
*)
VAR
    fbMotionSettings: FB_MotionStageSim_Settings;
    fbMotionReset: FB_MotionStage_Reset;
    fbMotionRequest: FB_MotionRequest;
    fbCauseNCError: FB_CauseNCError;
    tonTimeout: TON;
    nStep: INT := SETUP;
    nTest: INT := 1;
    fGoal: LREAL;
    nError: UDINT;
END_VAR
VAR CONSTANT
    SETUP: INT := 0;
    STEP_1: INT := 1;
    STEP_2: INT := 2;
    STEP_3: INT := 3;
    STEP_4: INT := 4;
    STEP_5: INT := 5;
    END: INT := 100;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Move on to the next test in the suite
// This comes first instead of last because TEST_FINISHED with no new TEST in the same cycle ends the test suite
IF nStep = END THEN
    TEST_FINISHED();
    nStep := SETUP;
    nTest := nTest + 1;
END_IF

// Common setup/reset for all tests in suite
ACT_Setup();

// Do test-specific stuff
CASE nTest OF
    1:
        ACT_TestBasic();
    2:
        ACT_TestError();
END_CASE]]></ST>
    </Implementation>
    <Action Name="ACT_Setup" Id="{6fae606a-2e88-4113-b37f-76c3e3bf28bb}">
      <Implementation>
        <ST><![CDATA[IF nStep = SETUP THEN
    fbMotionSettings(stMotionStage:=SIM.stBasicMotor);
    // Reset always takes at least 2 cycles, so there is time for the specific test to set up too
    fbMotionReset(
        stMotionStage:=SIM.stBasicMotor,
        bExecute:=TRUE);
    // Also clear lingering values in the motion request FB
    fbMotionRequest(
        stMotionStage:=SIM.stBasicMotor,
        bExecute:=FALSE,
        bReset:=TRUE);
    fbCauseNCError(
        Axis:=SIM.stBasicMotor.Axis,
        bExecute:=FALSE);
    // Also reset the timer
    tonTimeout(IN:=FALSE);
    IF fbMotionReset.bDone THEN
        AssertFalse(
            Condition:=SIM.stBasicMotor.bError,
            Message:='DUT_MotionStage had an error before we started!');
        // Reset the resets
        fbMotionReset(
            stMotionStage:=SIM.stBasicMotor,
            bExecute:=FALSE);
        fbMotionRequest(
            stMotionStage:=SIM.stBasicMotor,
            bExecute := FALSE,
            bReset := FALSE);
        // Move to arbitrary position that definitely is not the current position
        fGoal := SIM.stBasicMotor.stAxisStatus.fActPosition + 50;
        nStep := STEP_1;
    END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_TestBasic" Id="{d3f31c3f-994f-47fd-befa-fe72c1f7ed02}">
      <Implementation>
        <ST><![CDATA[CASE nStep OF
    SETUP:
        TEST('FB_MotionRequest Basic Motion');

    STEP_1:
        // Ask for a normal move
        fbMotionRequest(
            stMotionStage:=SIM.stBasicMotor,
            bExecute:=TRUE,
            fPos:=fGoal,
            fVel:=1000);

        // Timer in case test stalls out
        tonTimeout(
            IN:=TRUE,
            PT:=T#1s);

        IF fbMotionRequest.bDone THEN
            nStep := STEP_2;
        ELSIF tonTimeout.Q THEN

            // Make sure a timeout is a fail
            AssertTrue(
                Condition:=FALSE,
                Message:='Timeout during basic motion test!');

            nStep := STEP_2;
        END_IF

    STEP_2:
        // Did we get there?
        AssertEquals(
            Expected:=fGoal,
            Actual:=SIM.stBasicMotor.stAxisStatus.fActPosition,
            Message:='Failed to reach destination during basic motion test');

        // Does the FB have an error?
        AssertFalse(
            Condition:=fbMotionRequest.bError,
            Message:='FB_MotionRequest had an error during basic motion test');

        // Does the underlying DUT have an error?
        AssertFalse(
            Condition:=SIM.stBasicMotor.bError,
            Message:='DUT_MotionStage had an error during basic motion test');

        nStep := END;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_TestError" Id="{21df6625-4da2-4e83-a6a4-cbe948500446}">
      <Implementation>
        <ST><![CDATA[CASE nStep OF
    SETUP:
        TEST('FB_MotionRequest Error Handling');
        nError := 16#4450;

    STEP_1:
        // Ask for a very slow move
        fbMotionRequest(
            stMotionStage:=SIM.stBasicMotor,
            bExecute:=TRUE,
            fPos:=fGoal,
            fVel:=0.01);

        // Prepare to interrupt early
        tonTimeout(
            IN:=TRUE,
            PT:=T#100ms);

        // Interrupt the move with an error
        IF tonTimeout.Q THEN
            fbCauseNCError(
                Axis:=SIM.stBasicMotor.Axis,
                bExecute:=TRUE,
                nErrorCode:=nError);
        END_IF

        // Reset timer and move to next step
        IF fbCauseNCError.bDone THEN
            tonTimeout(IN:=FALSE);
            nStep := STEP_2;
        END_IF

    STEP_2:
        // Check that we have Errors
        AssertTrue(
            Condition:=SIM.stBasicMotor.Axis.Status.Error,
            Message:='Test issue, Axis has no NC error');
        AssertTrue(
            Condition:=SIM.stBasicMotor.bError,
            Message:='Error boolean did not propagate up to stMotionStage');
        AssertEquals(
            Expected := nError,
            Actual := SIM.stBasicMotor.nErrorId,
            Message:='Error code did not propagate up to stMotionStage');
        AssertTrue(
            Condition:=fbMotionRequest.bError,
            Message:='Error boolean did not propagate up to fbMotionRequest');
        AssertEquals(
            Expected := nError,
            Actual := fbMotionRequest.nErrorId,
            Message:='Error code did not propagate up to stMotionStage');
        nStep := STEP_3;

    STEP_3:
        // Reset the errors
        fbMotionRequest(
            stMotionStage:=SIM.stBasicMotor,
            bReset:=TRUE);

        // Wait a moment before checking
        tonTimeout(
            IN:=TRUE,
            PT:=T#100ms);

        // Make sure everything cleared out
        IF tonTimeout.Q THEN
            nError := 0;
            AssertFalse(
                Condition:=SIM.stBasicMotor.Axis.Status.Error,
                Message:='Error clear did not propagate down to the NC');
            AssertFalse(
                Condition:=SIM.stBasicMotor.bError,
                Message:='Error clear did not propagate down to stMotionStage');
            AssertEquals(
                Expected := nError,
                Actual := SIM.stBasicMotor.nErrorId,
                Message:='Error code clear did not propagate down to stMotionStage');
            AssertFalse(
                Condition:=fbMotionRequest.bError,
                Message:='Error boolean did not reset in fbMotionRequest');
            AssertEquals(
                Expected := nError,
                Actual := fbMotionRequest.nErrorId,
                Message:='Error code did not reset in stMotionStage');
            nStep := END;
        END_IF
END_CASE]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>