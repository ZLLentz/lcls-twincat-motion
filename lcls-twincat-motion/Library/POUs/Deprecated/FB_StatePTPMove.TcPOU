<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_StatePTPMove" Id="{425806ee-2b8b-43fd-93f1-34dff217483a}" SpecialFunc="None">
    <Declaration><![CDATA[
{attribute 'obsolete' := 'Use FB_PositionStateMove instead'}
FUNCTION_BLOCK FB_StatePTPMove
// Do not use, this is deprecated
VAR_INPUT
    {attribute 'pytmc' := '
        pv:
    '}
    stPositionState: ST_PositionState;

    {attribute 'pytmc' := '
        pv: GO
        io: io
        field: ZNAM False
        field: ONAM True
    '}
    bExecute: BOOL;

    bMoveOk: BOOL;
END_VAR
VAR_IN_OUT
    stMotionStage: ST_MotionStage;
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: AT_STATE
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bAtState: BOOL;

    {attribute 'pytmc' := '
        pv: DMOV
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bDone: BOOL;

    {attribute 'pytmc' := '
        pv: BUSY
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bBusy: BOOL;

    {attribute 'pytmc' := '
        pv: ERR
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bError: BOOL;

    {attribute 'pytmc' := '
        pv: ERRMSG
        io: input
    '}
    sError: STRING;
END_VAR
VAR
    bExecTrig: R_TRIG;
    bExecEnd: F_TRIG;
    fActPosition: LREAL;
    fLowPos: LREAL;
    fHighPos: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
bExecTrig(CLK:=bExecute);
IF bExecTrig.Q AND bMoveOk THEN
    IF NOT stMotionStage.bBusy AND NOT stMotionStage.bError THEN
        stMotionStage.bExecute := TRUE;
        stMotionStage.nCommand := E_EpicsMotorCmd.MOVE_ABSOLUTE;
        stMotionStage.fPosition := stPositionState.fPosition;
        stMotionStage.fVelocity := stPositionState.fVelocity;
        stMotionStage.fAcceleration := stPositionState.fAccel;
        stMotionStage.fDeceleration := stPositionState.fDecel;
        bDone := FALSE;
        bBusy := TRUE;
    END_IF
END_IF
bError := stMotionStage.bError;
sError := stMotionStage.sErrorMessage;

fActPosition := stMotionStage.stAxisStatus.fActPosition;
fLowPos := stPositionState.fPosition - stPositionState.fDelta;
fHighPos := stPositionState.fPosition + stPositionState.fDelta;
IF (fLowPos < fActPosition) AND (fHighPos > fActPosition) THEN
    bAtState := TRUE;
    IF NOT stMotionStage.bBusy THEN
        bDone := TRUE;
        bBusy := FALSE;
        bExecute := FALSE;
    END_IF
ELSE
    bAtState := FALSE;
END_IF

bExecEnd(CLK:=bExecute);
IF bExecEnd.Q AND bBusy THEN
    stMotionStage.bExecute := FALSE;
END_IF

IF NOT stMotionStage.bExecute OR NOT bExecute THEN
    bDone := TRUE;
    bBusy := FALSE;
    bExecute := FALSE;
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>