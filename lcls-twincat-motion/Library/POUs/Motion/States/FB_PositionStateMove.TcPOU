<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionStateMove" Id="{a935a12e-6ee3-4ebb-8c29-e9b23b7cef37}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PositionStateMove
(*
    Request a move to a particular state from an axis controlled via EPICS
    pytmc PVs here only exposed if using directly and not through another states function block.
*)
VAR_IN_OUT
    // Motor to move
    stMotionStage: ST_MotionStage;

    // State to move to
    {attribute 'pytmc' := '
        pv:
    '}
    stPositionState: ST_PositionState;
END_VAR
VAR_INPUT
    // Start move on rising edge, stop move on falling edge
    {attribute 'pytmc' := '
        pv: GO
        io: io
        field: ZNAM False
        field: ONAM True
    '}
    bExecute: BOOL;

    // Rising edge error reset
    {attribute 'pytmc' := '
        pv: RESET
        io: io
        field: ZNAM False
        field: ONAM True
    '}
    bReset: BOOL;

    // Define behavior for when a move is already active
    enumMotionRequest: E_MotionRequest := E_MotionRequest.WAIT;
END_VAR
VAR_OUTPUT
    // TRUE if the motor is at this state
    {attribute 'pytmc' := '
        pv: AT_STATE
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bAtState: BOOL;

    // TRUE if we have an error
    {attribute 'pytmc' := '
        pv: ERR
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bError: BOOL;

    // Error code
    {attribute 'pytmc' := '
        pv: ERRID
        io: input
    '}
    nErrorID: UDINT;

    // Error description
    {attribute 'pytmc' := '
        pv: ERRMSG
        io: input
    '}
    sErrorMessage: STRING;

    // TRUE if we are moving to a state
    {attribute 'pytmc' := '
        pv: BUSY
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bBusy: BOOL;

    // TRUE if we are not moving and we reached a state successfully on our last move
    {attribute 'pytmc' := '
        pv: DONE
        io: input
        field: ZNAM False
        field: ONAM True
    '}
    bDone: BOOL;
END_VAR
VAR
    fbMotionRequest: FB_MotionRequest;
    rtExec: R_TRIG;
    rtReset: R_TRIG;
    bInnerExec: BOOL;
    bAllowMove: BOOL;
    nLatchAllowErrorID: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Veto the move for uninitialized and unsafe states
bAllowMove := stPositionState.bMoveOk AND stPositionState.bValid AND stPositionState.bUpdated;

rtExec(CLK:=bExecute);
bInnerExec S= rtExec.Q AND bAllowMove AND NOT bError;
bInnerExec R= NOT bExecute;

// Do the move
fbMotionRequest(
    stMotionStage := stMotionStage,
    bExecute := bInnerExec,
    bReset := bReset,
    enumMotionRequest := enumMotionRequest,
    fPos := stPositionState.fPosition,
    fVel := stPositionState.fVelocity,
    fAcc := stPositionState.fAccel,
    fDec := stPositionState.fDecel,
    bError => bError,
    nErrorId => nErrorId,
    sErrorMessage => sErrorMessage,
    bBusy => bBusy,
    bDone => bDone);

rtReset(CLK:=bReset);
IF rtReset.Q THEN
    nLatchAllowErrorID := 0;
END_IF

// Inject custom error if we can't move because of bMoveOk or bValid
IF nLatchAllowErrorID <> 0 OR (bExecute AND NOT bAllowMove) THEN
    bError := TRUE;
    IF nLatchAllowErrorID <> 0 THEN
        nErrorID := nLatchAllowErrorID;
    ELSIF stPositionState.bValid THEN
        nErrorID := E_LCLSMotionError.UNSAFE;
    ELSE
        nErrorID := E_LCLSMotionError.INVALID;
    END_IF
    // Keep error latched until it is cleared, otherwise it can be lost early
    nLatchAllowErrorID := nErrorID;
    sErrorMessage := CONCAT(CONCAT(F_MotionErrorCodeLookup(nErrorId := nErrorID), ' for '), stPositionState.sName);
END_IF

// This can be useful if we're running this FB standalone for some reason
bAtState := F_AtPositionState(stMotionStage:=stMotionStage, stPositionState:=stPositionState);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>