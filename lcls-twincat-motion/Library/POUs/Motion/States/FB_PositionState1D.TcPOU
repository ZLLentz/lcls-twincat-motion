<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionState1D" Id="{a4622612-bbf9-489e-9ebe-a761329f88ce}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PositionState1D
(*
    1-Dimensional position state function block.

    This allows the user to move a motor among some set of named state positions.

    To use a states block, you must define enums that match the state options and give them pytmc pragmas.
    See FB_PositionState1D_InOut for a simple example.
    These enums must be passed in as the eEnumSet and eEnumGet VAR_IN_OUT variables.
    The enum values must match the array indices in astPositionState.

    A move will begin when eEnumSet is set to a positive, nonzero value. eEnumSet will be reset to 0 on every cycle, allowing us
    to accept a new, possibly conflicting, move request on the next cycle to interrupt the first.

    The motor must already be set up for point-to-point motion via FB_MotionStage, etc., for this function block to work properly.

    With no PMPS handling, this FB basically just links the state names with positions in both directions for set and readback.
*)
VAR_IN_OUT
    // The motor to move.
    stMotionStage: ST_MotionStage;
    // All possible position states, including unused/invalid states.
    {attribute 'pytmc' := '
        pv: STATE
        io: io
        expand: :%.2d
    '}
    astPositionState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    // Set this to a nonzero value to request a new move. It will be reset to zero every cycle. This should be hooked up to a user's EPICS enum input.
    eEnumSet: UINT;
    // The current state index, or zero if we are not at a state. This should be hooked up to a user's EPICS enum output.
    eEnumGet: UINT;
END_VAR
VAR_INPUT
    // Set this to TRUE to enable input state moves, or FALSE to disable them.
    bEnable: BOOL;
    // Normal EPICS inputs, gathered into a single struct
    {attribute 'pytmc' := 'pv: STATE'}
    stEpicsToPlc: ST_StateEpicsToPlc;
END_VAR
VAR_OUTPUT
    // Normal EPICS outputs, gathered into a single struct
    {attribute 'pytmc' := 'pv: STATE'}
    stPlcToEpics: ST_StatePlcToEpics;
END_VAR
VAR
    fbCore: FB_PositionStateND_Core;
    astMotionStageMax: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    astPositionStateMax: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
astMotionStageMax[1] := stMotionStage;
astPositionStateMax[1] := astPositionState;

fbCore(
    astMotionStageMax:=astMotionStageMax,
    astPositionStateMax:=astPositionStateMax,
    stEpicsToPlc:=stEpicsToPlc,
    stPlcToEpics:=stPlcToEpics,
    eEnumSet:=eEnumSet,
    eEnumGet:=eEnumGet,
    bEnable:=bEnable,
    nActiveMotorCount:=1,
);

stMotionStage := astMotionStageMax[1];
astPositionState := astPositionStateMax[1];
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>