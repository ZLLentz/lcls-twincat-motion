<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionStateRead" Id="{31debd70-d9f5-409b-baff-9d61c2241864}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PositionStateRead
(*
    This function block tells us what state a single motor is at.
    In the case of multiple valid overlapping states, one will be picked arbitrarily,
    but we can see a full description of which overlapping states are present using the abAtPosition array.

    This will only run properly if FB_PositionStateInternal has been called on each position state to initialize it.
*)
VAR_IN_OUT
    // The motor to check the state of
    stMotionStage: ST_MotionStage;
    // The allowed states for this motor
    astPositionState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
END_VAR
VAR_OUTPUT
    // TRUE if we're standing still at a known state, or moving within the bounds of a state to another location in the bounds.
    bKnownState: BOOL;
    // TRUE if we're moving to some other state or to another non-state position.
    bMovingState: BOOL;
    // If we're at a known state, this will be the index in the astPositionState array that matches the state. Otherwise, this will be 0, which is below the bounds of the array, so it cannot be confused with a valid output.
    nPositionIndex: UINT;
    // A copy of the details of the current position state, for convenience. This may be a moving state or an unknown state as a placeholder if we are not at a known state.
    stCurrentPosition: ST_PositionState;
    // A full description of whether we're at each of our states. This is used in 2D, 3D, etc. to clarify cases where states may overlap in 1D.
    abAtPosition: ARRAY[1..GeneralConstants.MAX_STATES] OF BOOL;
END_VAR
VAR
    nIter: UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
bKnownState := FALSE;
bMovingState := FALSE;

FOR nIter := 1 TO GeneralConstants.MAX_STATES DO
    IF astPositionState[nIter].bValid THEN
        MOTION_GVL.nMaxStates := MAX(MOTION_GVL.nMaxStates, nIter);
    END_IF
    IF F_AtPositionState(stMotionStage:=stMotionStage, stPositionState:=astPositionState[nIter]) THEN
        bKnownState := TRUE;
        nPositionIndex := nIter;
        stCurrentPosition := astPositionState[nIter];
        abAtPosition[nIter] := TRUE;
    ELSE
        abAtPosition[nIter] := FALSE;
    END_IF
END_FOR

IF NOT bKnownState THEN
    nPositionIndex := 0;
    stCurrentPosition.fPosition := stMotionStage.stAxisStatus.fActPosition;
    stCurrentPosition.fDelta := 0;
    stCurrentPosition.bMoveOk := FALSE;
    stCurrentPosition.bValid := FALSE;
    stCurrentPosition.bUseRawCounts := FALSE;

    bMovingState := stMotionStage.bExecute;
    IF bMovingState THEN
        stCurrentPosition.sName := 'Moving';
        stCurrentPosition.fVelocity := stMotionStage.fVelocity;
        stCurrentPosition.fAccel := stMotionStage.fAcceleration;
    ELSE
        stCurrentPosition.sName := 'Unknown';
    END_IF
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>