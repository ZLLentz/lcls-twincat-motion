<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_StateSetupHelper" Id="{802f49f0-571f-413b-bf0f-1cf473b320d9}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_StateSetupHelper
(*
    This is a helper for setting up large numbers of ST_PositionState instances.

    This is typically verbose to do by hand in the normal ways and can be error-prone.

    Calling with bSetDefault:=TRUE will set the default values to all the values
    from the input stPositionState. Note that the other args will be ignored in this case.
    This must be done at least once. If you forget to do this, there will be a warning and
    bValid will be set to FALSE, making it so we cannot move to that state.

    Calling without bSetDefault or with it set to FALSE will apply values to the
    input stPositionState with the following priority order:

    1. The value used in the function block call
    2. The value from the template stPositionState used in the most recent
       call with bSetDefault:=TRUE
    3. The original default value as defined on ST_PositionState

    For ease of use, to enable EPICS writes if unlocked, and to avoid repeated
    self-overwrites in the encoder count use case, this function block will not
    reapply the values to the same state again after the state has been fully
    initialized by the states function blocks, as determined by the bUpdated struct
    member. If you want to force the function block to reapply every cycle you can
    set bForceUpdate to TRUE, but it is not recommended. Without this feature,
    you would be required to wrap this function block in a guard to make sure it
    was only called once per state, which is fairly annoying.

    Example expected usage:
    VAR
        fbStateSetup: FB_StateSetupHelper;
        stDefault: ST_PositionState := (
            fDelta := 0.5,
            fVelocity := 10,
            bMoveOk := TRUE,
            bValid := TRUE
        );
        astStates1: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
        astStates2: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
        astStates2: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    END_VAR

    fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);

    fbStateSetup(stPositionState:=astStates1[1], sName:='OUT', fPosition:=10);
    fbStateSetup(stPositionState:=astStates1[2], sName:='YAG', fPosition:=20);
    fbStateSetup(stPositionState:=astStates1[3], sName:='TT', fPosition:=30);

    fbStateSetup(stPositionState:=astStates2[1], sName:='OUT', fPosition:=-30);
    fbStateSetup(stPositionState:=astStates2[2], sName:='YAG', fPosition:=35);
    fbStateSetup(stPositionState:=astStates2[3], sName:='TT', fPosition:=70);

    fbStateSetup(stPositionState:=astStates3[1], sName:='OUT', fPosition:=0.4, fDelta:=0.1);
    fbStateSetup(stPositionState:=astStates3[2], sName:='YAG', fPosition:=2.3, fDelta:=0.1);
    fbStateSetup(stPositionState:=astStates3[3], sName:='TT', fPosition:=5.6, fDelta:=0.1;
*)
VAR_IN_OUT
    stPositionState: ST_PositionState;
END_VAR
VAR_INPUT
    bSetDefault: BOOL;
    bForceUpdate: BOOL;
    sName: STRING;
    fPosition: LREAL;
    nEncoderCount: UDINT;
    fDelta: LREAL;
    fVelocity: LREAL;
    fAccel: LREAL;
    fDecel: LREAL;
    bMoveOk: BOOL;
    bLocked: BOOL;
    bValid: BOOL;
    bUseRawCounts: BOOL;
    sPmpsState: STRING;
END_VAR
VAR
    stDefault: ST_PositionState;
    fbWarning: FB_LogMessage;
    bHasDefault: BOOL;
    bHasWarned: BOOL;
    sJson: STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF bSetDefault THEN
    bSetDefault := FALSE;
    bHasDefault := TRUE;
    stDefault := stPositionState;
ELSIF bForceUpdate OR NOT stPositionState.bUpdated THEN
    stPositionState.sName := sName;
    stPositionState.fPosition := fPosition;
    stPositionState.nEncoderCount := nEncoderCount;
    stPositionState.fDelta := fDelta;
    stPositionState.fVelocity := fVelocity;
    stPositionState.fAccel := fAccel;
    stPositionState.fDecel := fDecel;
    stPositionState.bMoveOk := bMoveOk;
    stPositionState.bLocked := bLocked;
    stPositionState.bValid := bValid;
    stPositionState.bUseRawCounts := bUseRawCounts;
    stPositionState.stPMPS.sPmpsState := sPmpsState;
    IF NOT bHasDefault THEN
        stPositionState.bValid := FALSE;
        IF NOT bHasWarned THEN
            bHasWarned := TRUE;
            sJson := CONCAT(CONCAT(CONCAT(CONCAT('{"sName": "', sName), '", "sPmpsState": "'), sPmpsState), '"}');
            fbWarning(
                sMsg:=CONCAT('Did not initialize any defaults in FB_StateSetupHelper! Some states are disabled, check your code! ', sJson),
                eSevr:=TcEventSeverity.Warning,
                eSubSystem:=E_Subsystem.MOTION,
                sJson:=sJson,
            );
        END_IF
    END_IF
END_IF

// Overwrite the input args so that unset args are the defaults in the next call
sName := stDefault.sName;
fPosition := stDefault.fPosition;
nEncoderCount := stDefault.nEncoderCount;
fDelta := stDefault.fDelta;
fVelocity := stDefault.fVelocity;
fAccel := stDefault.fAccel;
fDecel := stDefault.fDecel;
bMoveOk := stDefault.bMoveOk;
bLocked := stDefault.bLocked;
bValid := stDefault.bValid;
bUseRawCounts := stDefault.bUseRawCounts;
sPmpsState := stDefault.stPMPS.sPmpsState;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>