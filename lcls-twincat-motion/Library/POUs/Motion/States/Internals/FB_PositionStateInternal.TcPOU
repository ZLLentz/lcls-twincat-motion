<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionStateInternal" Id="{a4177056-7990-0c0e-2a8a-8d9ac89a1e5e}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PositionStateInternal
(*
    Routines that must be called on all ST_PositionState

    Currently, this FB:
    - ensures that a position state has both a proper encoder count
      and a proper position in engineering units with both of these quantities matching
    - handles the parameter locking feature, which nominally prevents the user from changing
      details about a locked state via EPICS
*)
VAR_IN_OUT
    stMotionStage: ST_MotionStage;
    stPositionState: ST_PositionState;
END_VAR
VAR_OUTPUT
END_VAR
VAR
    fbEncConverter: FB_RawCountConverter;
    fbLock: FB_PositionStateLock;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Mark that we've been here
stPositionState.bUpdated := TRUE;

// Update pos state's count or egu position as appropriate
IF stMotionStage.bAxisParamsInit THEN
    fbEncConverter(
        stParameters:=stMotionStage.stAxisParameters,
        nCountCheck:=stPositionState.nEncoderCount,
        fPosCheck:=stPositionState.fPosition);
    IF stPositionState.bUseRawCounts THEN
        stPositionState.fPosition := fbEncConverter.fPosGet;
    ELSE
        stPositionState.nEncoderCount := fbEncConverter.nCountGet;
    END_IF
END_IF

// Handle state parameter locking
fbLock(
    stPositionState:=stPositionState,
    bEnable:=stMotionStage.bAxisParamsInit);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>