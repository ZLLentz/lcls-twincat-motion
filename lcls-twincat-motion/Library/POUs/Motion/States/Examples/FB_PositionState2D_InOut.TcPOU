<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionState2D_InOut" Id="{e1a37f1f-41f0-4e01-91d0-1b5090db86f1}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PositionState2D_InOut
(*
    An example and usable drop-in instance for a 2D state device with just an IN and an OUT state.
*)
VAR_IN_OUT
    // Include stages that can be passed into the FB
    stMotionStage1: ST_MotionStage;
    stMotionStage2: ST_MotionStage;
    // Simplify the interface, the user just needs to construct and pass in and out position states
    stIn1: ST_PositionState;
    stOut1: ST_PositionState;
    stIn2: ST_PositionState;
    stOut2: ST_PositionState;
END_VAR
VAR_INPUT
    // Define an ENUM for EPICS to use to set a new value. It is expected this will be written to during one cycle, so don't continually apply a value here in the PLC code.
    // It is exposed as an input so we can test it using the PLC.
    {attribute 'pytmc' := '
      pv: STATE:SET
      io: io
    '}
    eStateSet: E_EpicsInOut;
END_VAR
VAR_OUTPUT
    // Define an ENUM for EPICS to use to report the new value.
    {attribute 'pytmc' := '
      pv: STATE:GET
      io: i
    '}
    eStateGet: E_EpicsInOut;
END_VAR
VAR
    // Include the standard fb with blank pv pragma
    {attribute 'pytmc' := 'pv:'}
    fbPositionState2D: FB_PositionState2D;
    // The standard fb expects a full array of position states per motor
    astPositionState1: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    astPositionState2: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Optional: default state names
IF stIn1.sName = '' THEN
    stIn1.sName := 'IN';
END_IF
IF stOut1.sName = '' THEN
    stOut1.sName := 'OUT';
END_IF
IF stIn2.sName = '' THEN
    stIn2.sName := 'IN';
END_IF
IF stOut2.sName = '' THEN
    stOut2.sName := 'OUT';
END_IF

// Assemble the states arrays, matching the enum values
astPositionState1[E_EpicsInOut.OUT] := stOut1;
astPositionState1[E_EpicsInOut.IN] := stIn1;
astPositionState2[E_EpicsInOut.OUT] := stOut2;
astPositionState2[E_EpicsInOut.IN] := stIn2;

// Call the main function block, passing our motors, states, and an enable
fbPositionState2D(
    stMotionStage1:=stMotionStage1,
    astPositionState1:=astPositionState1,
    stMotionStage2:=stMotionStage2,
    astPositionState2:=astPositionState2,
    eEnumSet:=eStateSet,
    eEnumGet:=eStateGet,
    bEnable:=TRUE,
);

// Send updates made on the array back to the inputs (VAR_IN_OUT) for maximum clarity
stOut1 := astPositionState1[E_EpicsInOut.OUT];
stIn1 := astPositionState1[E_EpicsInOut.IN];
stOut2 := astPositionState2[E_EpicsInOut.OUT];
stIn2 := astPositionState2[E_EpicsInOut.IN];
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>