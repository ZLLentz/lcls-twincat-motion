<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_StatePMPSEnablesND_Test" Id="{ff910e0c-974f-4a98-85b1-04b7fad065f7}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_StatePMPSEnablesND_Test EXTENDS FB_MotorTestSuite
(*
    Unit tests for FB_StatePMPSEnablesND
    I'm confident that FB_StatePMPSEnables was tested in FB_StatePMPSEnables_Test
    There will be one core functionality check
    Then, the rest will be about the ND feature adds.
    Full checks:
    - Core motors not at goal can't move away check
    - bMaintMode = no move restrictions for all motors.
    - bMaintMode = fast fault
    - Wrong count = fast fault
*)
VAR
    astMotionStage: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    astPositionState: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    afbInternal: ARRAY[1..2] OF FB_PositionStateInternal;
    nIter: UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Spoof motor enables
FOR nIter := 1 TO 3 DO
    astMotionStage[nIter].bAllEnable := TRUE;
    astMotionStage[nIter].bAllForwardEnable := TRUE;
    astMotionStage[nIter].bAllBackwardEnable := TRUE;
END_FOR
// Note: the fake motors show as position = 0, so they will be over/under the goals here
astPositionState[1][1].fPosition := 10;
astPositionState[1][1].fDelta := 1;
afbInternal[1](
    stMotionStage:=astMotionStage[1],
    stPositionState:=astPositionState[1][1],
);
SetGoodState(astPositionState[1][1]);

astPositionState[2][1].fPosition := -10;
astPositionState[2][1].fDelta := 1;
afbInternal[2](
    stMotionStage:=astMotionStage[2],
    stPositionState:=astPositionState[2][1],
);
SetGoodState(astPositionState[2][1]);

TestUnderOverGoals();
TestMaint();
TestCount();
]]></ST>
    </Implementation>
    <Method Name="TestCount" Id="{d6400f38-11a7-4492-ab2a-c88608732da8}">
      <Declaration><![CDATA[
METHOD TestCount
VAR_INST
    fbEnables: FB_StatePMPSEnablesND;
    fbFFHWO: FB_HardwareFFOutput := (bAutoReset := TRUE);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestCount');

fbFFHWO.EvaluateOutput();
// No faults please
AssertTrue(
    fbFFHWO.q_xFastFaultOut,
    'Had faults prior to test',
);
fbEnables(
    astMotionStage:=astMotionStage,
    astPositionState:=astPositionState,
    fbFFHWO:=fbFFHWO,
    nGoalStateIndex:=1,
    sDeviceName:='TestUnderOverGoals',
    bMaintMode:=FALSE,
);
fbFFHWO.EvaluateOutput();
// Must fault with bad count
AssertFalse(
    fbFFHWO.q_xFastFaultOut,
    'Had no fault with bad count',
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMaint" Id="{d1343989-c22d-4197-9f79-b95d14375929}">
      <Declaration><![CDATA[
METHOD TestMaint
VAR_INST
    fbEnables: FB_StatePMPSEnablesND;
    fbFFHWO: FB_HardwareFFOutput := (bAutoReset := TRUE);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestMaint');

fbFFHWO.EvaluateOutput();
// No faults please
AssertTrue(
    fbFFHWO.q_xFastFaultOut,
    'Had faults prior to test',
);
fbEnables(
    astMotionStage:=astMotionStage,
    astPositionState:=astPositionState,
    fbFFHWO:=fbFFHWO,
    nActiveMotorCount:=2,
    nGoalStateIndex:=1,
    sDeviceName:='TestUnderOverGoals',
    bMaintMode:=TRUE,
);
fbFFHWO.EvaluateOutput();
// Must fault in maint mode
AssertFalse(
    fbFFHWO.q_xFastFaultOut,
    'Had no fault in maintenance mode',
);
// All overrides should be relaxed
AssertTrue(
    fbEnables.abForwardEnabled[1],
    'In maintenance mode, we should be able to move anywhere',
);
AssertTrue(
    fbEnables.abBackwardEnabled[1],
    'In maintenance mode, we should be able to move anywhere',
);
AssertTrue(
    fbEnables.abForwardEnabled[1],
    'In maintenance mode, we should be able to move anywhere',
);
AssertTrue(
    fbEnables.abBackwardEnabled[1],
    'In maintenance mode, we should be able to move anywhere',
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestUnderOverGoals" Id="{30ac6b2b-0053-4545-8595-c5bfc7395258}">
      <Declaration><![CDATA[
METHOD TestUnderOverGoals
VAR_INST
    fbEnables: FB_StatePMPSEnablesND;
    fbFFHWO: FB_HardwareFFOutput := (bAutoReset := TRUE);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestUnderOverGoals');

IF NOT astPositionState[1][1].bUpdated OR NOT astPositionState[2][1].bUpdated THEN
    // Cannot run this test until the one-time-setup runs
    RETURN;
END_IF

fbEnables(
    astMotionStage:=astMotionStage,
    astPositionState:=astPositionState,
    fbFFHWO:=fbFFHWO,
    bEnable:=TRUE,
    nActiveMotorCount:=2,
    nGoalStateIndex:=1,
    sDeviceName:='TestUnderOverGoals',
    bMaintMode:=FALSE,
);
fbFFHWO.EvaluateOutput();
// No faults please
AssertTrue(
    fbFFHWO.q_xFastFaultOut,
    'Had faults in normal situation',
);
// All core enables are true
AssertTrue(
    astMotionStage[1].bAllForwardEnable,
    'Core enables should be TRUE',
);
AssertTrue(
    astMotionStage[1].bAllBackwardEnable,
    'Core enables should be TRUE',
);
AssertTrue(
    astMotionStage[2].bAllForwardEnable,
    'Core enables should be TRUE',
);
AssertTrue(
    astMotionStage[2].bAllBackwardEnable,
    'Core enables should be TRUE',
);
// But the overrides force us to move toward the goal
// Motor 1 is below the goal, Motor 2 is above the goal
AssertTrue(
    fbEnables.abForwardEnabled[1],
    'Motor 1 should be able to move up to the goal',
);
AssertFalse(
    fbEnables.abBackwardEnabled[1],
    'Motor 1 should not be able to move down away from the goal',
);
AssertFalse(
    fbEnables.abForwardEnabled[2],
    'Motor 2 should not be able to move up away from the goal',
);
AssertTrue(
    fbEnables.abBackwardEnabled[2],
    'Motor 2 should be able to move down to the goal',
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>