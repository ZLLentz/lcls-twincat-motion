<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PerMotorFFOND_Test" Id="{e88b9963-261b-47d2-82dd-2fce2cf61cac}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PerMotorFFOND_Test EXTENDS TcUnit.FB_TestSuite
(*
    FFO if an illogical motor count is passed
    FFO if any motor has what looks like an encoder error
       - We'll just simulate this without doing it legit
       - The legit test is done elsewhere
    More FFOs may be added later and these will need to be tested too
*)
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
TestBlankCount();
TestTwoMotorEncError();
]]></ST>
    </Implementation>
    <Method Name="TestBlankCount" Id="{b592b937-5942-474f-adf1-21d2ac9a86c9}">
      <Declaration><![CDATA[
METHOD TestBlankCount : BOOL
VAR_INST
    fbFFO: FB_PerMotorFFOND;
    astMotionStage: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    fbFFHWO: FB_HardwareFFOutput := (bAutoReset := TRUE);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestBlankCount');

fbFFHWO.EvaluateOutput();
AssertTrue(
    fbFFHWO.q_xFastFaultOut,
    'Started with a fault',
);
fbFFO(
    astMotionStage:=astMotionStage,
    fbFFHWO:=fbFFHWO,
);
fbFFHWO.EvaluateOutput();
AssertFalse(
    fbFFHWO.q_xFastFaultOut,
    'Blank count did not fault',
);
AssertTrue(
    fbFFO.bMotorCountError,
    'Blank count did not error',
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTwoMotorEncError" Id="{b8fbe696-7ca6-46ad-9906-fdd9389c922a}">
      <Declaration><![CDATA[
METHOD TestTwoMotorEncError : BOOL
VAR_INST
    fbFFO: FB_PerMotorFFOND;
    astMotionStage: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    fbFFHWO: FB_HardwareFFOutput := (bAutoReset := TRUE);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestTwoMotorEncError');

fbFFHWO.EvaluateOutput();
AssertTrue(
    fbFFHWO.q_xFastFaultOut,
    'Started with a fault',
);
astMotionStage[2].bError := TRUE;
astMotionStage[2].nErrorId := 16#4467; // Invalid encoder position data
fbFFO(
    astMotionStage:=astMotionStage,
    fbFFHWO:=fbFFHWO,
    nActiveMotorCount:=2,
);
fbFFHWO.EvaluateOutput();
AssertFalse(
    fbFFHWO.q_xFastFaultOut,
    'Encoder error did not fault',
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>