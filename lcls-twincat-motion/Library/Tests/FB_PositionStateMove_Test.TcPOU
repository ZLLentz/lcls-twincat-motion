<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionStateMove_Test" Id="{790463b9-e234-4505-8844-0fd9623da364}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_PositionStateMove_Test EXTENDS FB_MotorTestSuite
(*
    Test that FB_PositionStateMove can be used to move motors to named state positions
    And that the API behaves exactly as described.
*)
VAR
    stMotionStage: ST_MotionStage;
    fbMotionStage: FB_MotionStage;
    astPositionState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    afbInternal: ARRAY[1..3] OF FB_PositionStateInternal;
    stDummyPos: ST_PositionState;
    stInvalid: ST_PositionState;
    stNotUpdated: ST_PositionState;
    stUnsafe: ST_PositionState;
    fbMove: FB_PositionStateMove;

    nTestCounter: UINT;
    bOneTestDone: BOOL;
    fTestStartPos: LREAL;
    tonTimer: TON;
    tonCleanup: TON;
    nIter: DINT;
    bStatesReady: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
astPositionState[1].sName := 'UNO';
astPositionState[1].fPosition := 10;
astPositionState[1].fDelta := 1;
astPositionState[1].fVelocity := 10;
SetGoodState(astPositionState[1]);

astPositionState[2].sName := 'DOS';
astPositionState[2].fPosition := 20;
astPositionState[2].fDelta := 1;
astPositionState[2].fVelocity := 10;
SetGoodState(astPositionState[2]);

astPositionState[3].sName := 'TRES';
astPositionState[3].fPosition := 30;
astPositionState[3].fDelta := 1;
astPositionState[3].fVelocity := 10;
SetGoodState(astPositionState[3]);

bStatesReady := TRUE;
FOR nIter := 1 TO 3 DO
    afbInternal[nIter](
        stMotionStage:=stMotionStage,
        stPositionState:=astPositionState[nIter],
    );
    bStatesReady := bStatesReady AND astPositionState[nIter].bUpdated;
END_FOR
stInvalid.bValid := FALSE;
stInvalid.bUpdated := TRUE;
stInvalid.bMoveOk := TRUE;
stNotUpdated.bValid := TRUE;
stNotUpdated.bUpdated := FALSE;
stNotUpdated.bMoveOk := TRUE;
stUnsafe.bValid := TRUE;
stUnsafe.bUpdated := TRUE;
stUnsafe.bMoveOk := FALSE;

SetEnables(stMotionStage);
fbMotionStage(stMotionStage:=stMotionStage);

IF bStatesReady AND nTestCounter = 0 THEN
    // Don't run any tests until the states are ready
    nTestCounter := 1;
    // Warm up the motion FB with a exec false runthrough
    fbMove(
        stMotionStage:=stMotionStage,
        stPositionState:=stDummyPos,
        bExecute:=FALSE,
    );
END_IF

// Test that we can move to state 1 and the outputs are correct as we go
TestMove(1, 1, FALSE);
// Test that we can move to state 2 and the outputs are correct as we go
TestMove(2, 2, FALSE);
// Test that we can interrupt a move to state 3 by dropping bExecute
TestMove(3, 3, TRUE);
// Test that we cannot move to an invalid state
TestBadStates(4);
// Test that we need a new bExecute to start a new move if a move goes from unsafe to safe
TestMoveOk(5);

// Wait a few cycles for remaining errors to propagate
tonCleanup(IN:=bOneTestDone, PT:=T#1s);
IF tonCleanup.Q THEN
    IF fbMove.bBusy THEN
        fbMove(
            stMotionStage:=stMotionStage,
            stPositionState:=stDummyPos,
            bExecute:=FALSE,
            bReset:=FALSE,
        );
    ELSIF stMotionStage.bBusy THEN
        stMotionStage.bExecute := FALSE;
    ELSIF fbMove.bError THEN
        fbMove(
            stMotionStage:=stMotionStage,
            stPositionState:=stDummyPos,
            bExecute:=FALSE,
            bReset:=TRUE,
        );
    ELSIF stMotionStage.bError THEN
       stMotionStage.bReset := TRUE;
    ELSE
        fbMove(
            stMotionStage:=stMotionStage,
            stPositionState:=stDummyPos,
            bExecute:=FALSE,
            bReset:=FALSE,
        );
        stMotionStage.bReset := FALSE;

        bOneTestDone := FALSE;
        nTestCounter := nTestCounter + 1;
        tonTimer(IN:=FALSE);
    END_IF
END_IF
// Use this timer to time out any tests that stall
tonTimer(
    IN:=bStatesReady,
    PT:=T#5s,
);
]]></ST>
    </Implementation>
    <Method Name="TestBadStates" Id="{879d6a71-af35-4146-a1a6-b64142eb1f2f}">
      <Declaration><![CDATA[
METHOD TestBadStates
VAR_INPUT
    nTestIndex: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestInvalid', UINT_TO_STRING(nTestIndex)));
IF nTestCounter <> nTestIndex OR bOneTestDone THEN
    RETURN;
END_IF

AssertFalse(
    fbMove.bError,
    'Started with an error',
);

fbMove(
    stMotionStage:=stMotionstage,
    stPositionState:=stInvalid,
    bExecute:=TRUE,
);

AssertTrue(
    fbMove.bError,
    'Invalid should have given an error',
);

fbMove(
    stMotionStage:=stMotionstage,
    stPositionState:=stInvalid,
    bExecute:=FALSE,
    bReset:=TRUE,
);

AssertFalse(
    fbMove.bError,
    'Started with an error',
);

fbMove(
    stMotionStage:=stMotionstage,
    stPositionState:=stNotUpdated,
    bExecute:=TRUE,
    bReset:=FALSE,
);

AssertTrue(
    fbMove.bError,
    'Not updated should have given an error',
);

fbMove(
    stMotionStage:=stMotionstage,
    stPositionState:=stNotUpdated,
    bExecute:=FALSE,
    bReset:=TRUE,
);

AssertFalse(
    fbMove.bError,
    'Started with an error',
);

fbMove(
    stMotionStage:=stMotionstage,
    stPositionState:=stUnsafe,
    bExecute:=TRUE,
    bReset:=FALSE,
);

AssertTrue(
    fbMove.bError,
    'Unsafe should have given an error',
);

bOneTestDone := TRUE;
TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMove" Id="{e32e39d1-d908-4e1d-a77e-6982c23e392d}">
      <Declaration><![CDATA[
METHOD TestMove
VAR_INPUT
    nTestIndex: UINT;
    nStateIndex: UINT;
    bInterrupt: BOOL;
END_VAR
VAR_INST
    bLocalInit: BOOL;
    bInterruptStarted: BOOL;
    tonBusy: TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestMove', UINT_TO_STRING(nTestIndex)));
IF nTestCounter <> nTestIndex OR bOneTestDone THEN
    RETURN;
END_IF

IF NOT bLocalInit THEN
    // Starting output checks
    AssertFalse(
        Condition:=fbMove.bBusy,
        Message:='Tried to start test with busy motor',
    );
    AssertFalse(
        Condition:=fbMove.bError,
        Message:='Tried to start test with errored motor',
    );
    bLocalInit := TRUE;
END_IF

// Simulate waiting a moment before stopping
tonBusy(IN:=stMotionStage.bBusy, PT:=T#100ms);
bInterruptStarted S= bInterrupt AND tonBusy.Q;

fbMove(
    stMotionStage:=stMotionstage,
    stPositionState:=astPositionState[nStateIndex],
    bExecute:=NOT bInterruptStarted,
);

IF fbMove.bDone OR tonTimer.Q OR (bInterruptStarted AND NOT fbMove.bBusy) THEN
    AssertFalse(
        tonTimer.Q,
        'Test timed out',
    );
    IF bInterrupt THEN
        AssertFalse(
            fbMove.bAtState,
            Message:='Should have been interrupted, but made it to the goal',
        );
    ELSE
        AssertTrue(
            fbMove.bAtState,
            Message:='Did not end at the state',
        );
        AssertEquals_LREAL(
            Expected:=astPositionState[nStateIndex].fPosition,
            Actual:=stMotionStage.stAxisStatus.fActPosition,
            Delta:=0.01,
            Message:='Did not reach the goal state',
        );
    END_IF
    AssertFalse(
        fbMove.bBusy,
        Message:='Was busy while done',
    );
    AssertFalse(
        fbMove.bError,
        Message:=CONCAT('Should not end in error: ', stMotionStage.sErrorMessage),
    );

    bOneTestDone := TRUE;
    bLocalInit := FALSE;
    bInterruptStarted := FALSE;
    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveOk" Id="{0a0e07ec-6039-465c-88e5-a08bb2253266}">
      <Declaration><![CDATA[
METHOD TestMoveOk
VAR_INPUT
    nTestIndex: UINT;
END_VAR
VAR_INST
    nStep: UINT;
    fStartPos: LREAL;
    stState: ST_PositionState := (
        sName:='GOAL',
        fPosition:=135,
        fDelta:=0.5,
        fVelocity:=1,
        bValid:=TRUE,
        bMoveOk:=FALSE,
        bUpdated:=TRUE
    );
    tonInternal: TON;
    bLocalExec: BOOL;
    bLocalReset: BOOL;
END_VAR
VAR CONSTANT
    END: UINT := 999;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestMoveOk');
IF nTestCounter <> nTestIndex OR bOneTestDone THEN
    RETURN;
END_IF

CASE nStep OF
    // Initial setup and checks
    0:
        fStartPos := stMotionStage.stAxisStatus.fActPosition;
        AssertFalse(
            fbMove.bError,
            'Started with a fbMove error',
        );
        AssertFalse(
            stMotionStage.bError,
            'Started with a motor error',
        );
        bLocalExec := FALSE;
        bLocalReset := FALSE;
        nStep := nStep + 1;
    // Move to a state that is bad
    1:
        stState.bMoveOk := FALSE;
        bLocalExec := TRUE;
        nStep := nStep + 1;
    // The move should have failed with an error on the FB that never propagated to the motor itself- we shouldn't have attempted the move at all
    2:
        AssertTrue(
            fbMove.bError,
            'Did not have the expected move not ok error',
        );
        AssertFalse(
            stMotionStage.bError,
            'Had a motion error, but we never should have asked for a move?',
        );
        nStep := nStep + 1;
    // Make the state no longer bad, and wait a bit
    3:
        stState.bMoveOk := TRUE;
        tonInternal(IN:=TRUE, PT:=T#500ms);
        IF tonInternal.Q THEN
            tonInternal(IN:=FALSE);
            nStep := nStep + 1;
        END_IF
    // There should be no movement still
    4:
        AssertEquals_LREAL(
            Expected:=fStartPos,
            Actual:=stMotionStage.stAxisStatus.fActPosition,
            Delta:=0.1,
            Message:='Motor moved without bReset or a new bExecute!',
        );
        // Reset the error (rising edge)
        bLocalReset := TRUE;
        nStep := nStep + 1;
    // After we reset the error, wait a bit
    5:
        // Drop for rising edges later
        bLocalReset := FALSE;
        tonInternal(IN:=TRUE, PT:=T#500ms);
        IF tonInternal.Q THEN
            tonInternal(IN:=FALSE);
            nStep := nStep + 1;
        END_IF
    // There should be no error, and STILL be no movement
    6:
        AssertFalse(
            fbMove.bError,
            'The error should be reset',
        );
        AssertEquals_LREAL(
            Expected:=fStartPos,
            Actual:=stMotionStage.stAxisStatus.fActPosition,
            Delta:=0.1,
            Message:='Motor moved without a new bExecute!',
        );
        // Set bExecute to FALSE for an upcoming rising edge. It should be TRUE at this point.
        bLocalExec := FALSE;
        nStep := nStep + 1;
    // We should be able to start a move via bExecute now
    7:
        stState.fVelocity := 2000;
        stState.fAccel := 15000;
        stState.fDecel := 15000;
        bLocalExec := TRUE;
        IF fbMove.bAtState AND stMotionStage.bDone THEN
            nStep := END;
        END_IF
END_CASE

// Run fbMove exactly once every cycle no matter what
fbMove(
    stMotionStage:=stMotionStage,
    stPositionState:=stState,
    bExecute:=bLocalExec,
    bReset:=bLocalReset,
);

IF nStep = END OR tonTimer.Q THEN
    AssertFalse(
        tonTimer.Q,
        'Test timed out',
    );
    // Check that we've reached the goal
    AssertEquals_LREAL(
        Expected:=stState.fPosition,
        Actual:=stMotionStage.stAxisStatus.fActPosition,
        Delta:=0.1,
        Message:='Motor did not reach the goal.',
    );
    bOneTestDone := TRUE;
    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>